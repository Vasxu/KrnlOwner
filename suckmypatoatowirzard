local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
print("this is skid free btw just a example script not the full")
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    -- Set Center to true if you want the menu to appear in the center
    -- Set AutoShow to true if you want the menu to appear when it is created
    -- Position and Size are also valid options here
    -- but you do not need to define them unless you are changing them :)

    Title = 'Trollhax [RO-WIZARD]',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

-- CALLBACK NOTE:
-- Passing in callback functions via the initial element parameters (i.e. Callback = function(Value)...) works
-- HOWEVER, using Toggles/Options.INDEX:OnChanged(function(Value) ... ) is the RECOMMENDED way to do this.
-- I strongly recommend decoupling UI code from logic code. i.e. Create your UI elements FIRST, and THEN setup :OnChanged functions later.

-- You do not have to set your tabs & groups up this way, just a prefrence.
local Tabs = {
    -- Creates a new tab titled Main
    Main = Window:AddTab('Main'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Groupbox and Tabbox inherit the same functions
-- except Tabboxes you have to call the functions on a tab (Tabbox:AddTab(name))
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Exploits')

-- We can also get our Main tab via the following code:
-- local LeftGroupBox = Window.Tabs.Main:AddLeftGroupbox('Groupbox')

-- Tabboxes are a tiny bit different, but here's a basic example:
--[[
local TabBox = Tabs.Main:AddLeftTabbox() -- Add Tabbox on left side
local Tab1 = TabBox:AddTab('Tab 1')
local Tab2 = TabBox:AddTab('Tab 2')
-- You can now call AddToggle, etc on the tabs you added to the Tabbox
]]

-- Groupbox:AddToggle
-- Arguments: Index, Options
LeftGroupBox:AddToggle('Unlock all spells', {
    Text = 'Unlock All Spells',
    Default = true, -- Default value (true / false)
    Tooltip = 'Unlocks every single spell in the game.', -- Information shown when you hover over the toggle
    Callback = function(Value)
		for i, v in pairs(getgc(true)) do if type(v) == "table" and rawget(v, "RPName") then for x = 1, 100 do table.insert(v["KnownSpells"], { Unlocked = true, Id = x }) end for x, d in pairs(v["KnownSpells"]) do if d.Unlocked == false then d.Unlocked = true end end end end
    end
})

LeftGroupBox:AddToggle('MyToggle', {
    Text = 'Free store.',
    Default = true, -- Default value (true / false)
    Tooltip = 'note: not actually free store you need more than 1 gem (ingame currency)', -- Information shown when you hover over the toggle
    Callback = function(Value)
        for i, v in pairs(getgc(true)) do
			if type(v) == "table" and rawget(v, "Gems") and rawget(v, "Rarity") then
			v.Gems = 0.00000001
			end
			end
    end
})
LeftGroupBox:AddToggle('MyToggle', {
    Text = 'unlock unobtainables',
    Default = true, -- Default value (true / false)
    Tooltip = 'pretty much same as unlock all spells script.', -- Information shown when you hover over the toggle
    Callback = function(Value)
        v14 = require(game:GetService("ReplicatedStorage").Modules.Spell.SpellFunctions); local yahoo = require(game:GetService("ReplicatedStorage").Modules.Spell) for i, v in pairs(yahoo["Spells"]) do if v.Name == "tarantallegra" then v.Function = v14.Incarcerous end end for i, v in pairs(getgc(true)) do if type(v) == "table" and rawget(v, "RPName") then table.insert(v["KnownSpells"], { Unlocked = true, Id = 4 }) end
    end
})
